name: 'Build and Release'

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'draft'
        type: choice
        options:
          - draft
          - prerelease
          - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v2
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.1 is for Tauri v2

      - name: install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: format frontend
        run: pnpm run format

      - name: build frontend
        run: pnpm run build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: |
            ## 🚀 Release __VERSION__

            ### 📦 Download Links

            #### macOS Versions
            - **Intel (x64)**: `template-tauri-react___VERSION___x64.dmg`
            - **Apple Silicon (ARM64)**: `template-tauri-react___VERSION___aarch64.dmg`
            - **App Bundle (Intel)**: `template-tauri-react_x64.app.tar.gz`
            - **App Bundle (ARM64)**: `template-tauri-react_aarch64.app.tar.gz`

            #### Windows Versions
            - **Installer**: `template-tauri-react___VERSION___x64-setup.exe`
            - **MSI Package**: `template-tauri-react___VERSION___x64_en-US.msi`

            #### Linux Versions
            - **AppImage**: `template-tauri-react___VERSION___amd64.AppImage`
            - **DEB Package**: `template-tauri-react___VERSION___amd64.deb`
            - **RPM Package**: `template-tauri-react-__VERSION__-1.x86_64.rpm`

            ### 🔧 Installation Instructions

            #### macOS
            1. **DMG Files**: Download the appropriate architecture `.dmg` file, double-click to open and drag to Applications folder
            2. **APP Bundles**: Extract the `.tar.gz` file and move the `.app` file to Applications folder
            3. First run may require allowing the app in System Preferences > Security & Privacy

            #### Windows
            1. **EXE Installer**: Download and run the `-setup.exe` file, follow the installation prompts
            2. **MSI Package**: Download and run the `.msi` file to install
            3. Windows Defender may show a warning, select "Run anyway"

            #### Linux
            - **AppImage**: After download, add execute permission `chmod +x template-tauri-react_*_amd64.AppImage`, then run directly
            - **DEB**: Install using `sudo dpkg -i template-tauri-react_*_amd64.deb`
            - **RPM**: Install using `sudo rpm -i template-tauri-react-*-1.x86_64.rpm`

            ---

            ## 🚀 发布版本 __VERSION__

            ### 📦 下载链接

            #### macOS 版本
            - **Intel (x64)**: `template-tauri-react___VERSION___x64.dmg`
            - **Apple Silicon (ARM64)**: `template-tauri-react___VERSION___aarch64.dmg`
            - **应用包 (Intel)**: `template-tauri-react_x64.app.tar.gz`
            - **应用包 (ARM64)**: `template-tauri-react_aarch64.app.tar.gz`

            #### Windows 版本
            - **安装程序**: `template-tauri-react___VERSION___x64-setup.exe`
            - **MSI 安装包**: `template-tauri-react___VERSION___x64_en-US.msi`

            #### Linux 版本
            - **AppImage**: `template-tauri-react___VERSION___amd64.AppImage`
            - **DEB 包**: `template-tauri-react___VERSION___amd64.deb`
            - **RPM 包**: `template-tauri-react-__VERSION__-1.x86_64.rpm`

            ### 🔧 安装说明

            #### macOS
            1. **DMG 文件**: 下载对应架构的 `.dmg` 文件，双击打开并拖拽到应用程序文件夹
            2. **APP 包**: 解压 `.tar.gz` 文件，将 `.app` 文件移动到应用程序文件夹
            3. 首次运行可能需要在系统偏好设置 > 安全性与隐私中允许

            #### Windows
            1. **EXE 安装程序**: 下载并运行 `-setup.exe` 文件，按提示完成安装
            2. **MSI 安装包**: 下载并运行 `.msi` 文件进行安装
            3. Windows Defender 可能会显示警告，选择"仍要运行"

            #### Linux
            - **AppImage**: 下载后添加执行权限 `chmod +x template-tauri-react_*_amd64.AppImage`，然后直接运行
            - **DEB**: 使用 `sudo dpkg -i template-tauri-react_*_amd64.deb` 安装
            - **RPM**: 使用 `sudo rpm -i template-tauri-react-*-1.x86_64.rpm` 安装

          releaseDraft: ${{ github.event.inputs.release_type == 'draft' || github.event_name != 'workflow_dispatch' }}
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          args: ${{ matrix.args }}
