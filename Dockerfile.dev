# Tauri + React 开发环境 Docker 镜像
# 提供标准化的跨平台开发环境

FROM ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV RUST_VERSION=1.75.0
ENV NODE_VERSION=20.10.0
ENV ANDROID_SDK_VERSION=9477386
ENV ANDROID_API_LEVEL=34
ENV ANDROID_BUILD_TOOLS_VERSION=34.0.0
ENV ANDROID_NDK_VERSION=25.2.9519653

# 设置工作目录
WORKDIR /workspace

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    pkg-config \
    libssl-dev \
    libgtk-3-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    libwebkit2gtk-4.0-dev \
    libxdo-dev \
    libxrandr-dev \
    libdbus-1-dev \
    libasound2-dev \
    libpulse-dev \
    libudev-dev \
    libvulkan1 \
    mesa-vulkan-drivers \
    vulkan-utils \
    openjdk-17-jdk \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# 安装 Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# 安装 Yarn
RUN npm install -g yarn

# 安装 Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_VERSION
ENV PATH="/root/.cargo/bin:${PATH}"

# 安装 Rust 目标平台
RUN rustup target add aarch64-unknown-linux-gnu \
    && rustup target add x86_64-unknown-linux-gnu \
    && rustup target add aarch64-linux-android \
    && rustup target add armv7-linux-androideabi \
    && rustup target add i686-linux-android \
    && rustup target add x86_64-linux-android

# 安装 Tauri CLI
RUN cargo install tauri-cli

# 设置 Android SDK 环境
ENV ANDROID_HOME=/opt/android-sdk
ENV ANDROID_SDK_ROOT=$ANDROID_HOME
ENV PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator"

# 安装 Android SDK
RUN mkdir -p $ANDROID_HOME/cmdline-tools \
    && cd $ANDROID_HOME/cmdline-tools \
    && wget https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip \
    && unzip commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip \
    && mv cmdline-tools latest \
    && rm commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip

# 接受 Android SDK 许可证
RUN yes | sdkmanager --licenses

# 安装 Android SDK 组件
RUN sdkmanager "platform-tools" \
    && sdkmanager "platforms;android-${ANDROID_API_LEVEL}" \
    && sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" \
    && sdkmanager "ndk;${ANDROID_NDK_VERSION}" \
    && sdkmanager "emulator" \
    && sdkmanager "system-images;android-${ANDROID_API_LEVEL};google_apis;x86_64"

# 设置 NDK 环境变量
ENV ANDROID_NDK_HOME=$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION
ENV NDK_HOME=$ANDROID_NDK_HOME

# 创建 Android 虚拟设备
RUN echo "no" | avdmanager create avd \
    --force \
    --name "tauri_dev" \
    --package "system-images;android-${ANDROID_API_LEVEL};google_apis;x86_64" \
    --tag "google_apis" \
    --abi "x86_64"

# 安装开发工具
RUN cargo install cargo-watch
RUN npm install -g @tauri-apps/cli

# 设置用户权限
RUN useradd -m -s /bin/bash developer \
    && chown -R developer:developer /workspace \
    && chown -R developer:developer $ANDROID_HOME

# 切换到开发用户
USER developer
WORKDIR /workspace

# 复制项目文件
COPY --chown=developer:developer package*.json ./
COPY --chown=developer:developer yarn.lock ./

# 安装项目依赖
RUN yarn install

# 复制源代码
COPY --chown=developer:developer . .

# 暴露端口
EXPOSE 1420 3000 8080

# 设置启动脚本
CMD ["bash"]